name: Test, Build and Deploy Go Application

# Defines events to trigger the GitHub Actions
# Push and pull request to main branch trigger this workflows
on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: fanclub-service
  ECS_CLUSTER: fanclub-cluster
  ECS_TASK_DEFINITION: fanclub-task
  CONTAINER_NAME: fanclub-api

jobs:
  build:
    runs-on: ubuntu-latest
    # Set the default working directory to /src
    defaults:
      run:
        working-directory: ./src

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Golang
      - name: Setup Go 1.22.0
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.0"

      - name: Install dependencies
        run: go get .

      # Build test
      - name: Build
        run: go build

      # Run unit tests
      - name: Test
        run: |
          cd tests
          go test  -v ./...

  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          #
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #
          REPOSITORY: fanclub

          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./src
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t ${{env.REGISTRY}}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{env.REGISTRY}}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "image=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
