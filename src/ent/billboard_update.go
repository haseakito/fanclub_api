// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hackgame-org/fanclub_api/ent/asset"
	"github.com/hackgame-org/fanclub_api/ent/billboard"
	"github.com/hackgame-org/fanclub_api/ent/predicate"
)

// BillboardUpdate is the builder for updating Billboard entities.
type BillboardUpdate struct {
	config
	hooks    []Hook
	mutation *BillboardMutation
}

// Where appends a list predicates to the BillboardUpdate builder.
func (bu *BillboardUpdate) Where(ps ...predicate.Billboard) *BillboardUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BillboardUpdate) SetTitle(s string) *BillboardUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BillboardUpdate) SetNillableTitle(s *string) *BillboardUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BillboardUpdate) SetDescription(s string) *BillboardUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BillboardUpdate) SetNillableDescription(s *string) *BillboardUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BillboardUpdate) ClearDescription() *BillboardUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BillboardUpdate) SetCreatedAt(t time.Time) *BillboardUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BillboardUpdate) SetNillableCreatedAt(t *time.Time) *BillboardUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BillboardUpdate) SetUpdatedAt(t time.Time) *BillboardUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetAssetID sets the "asset" edge to the Asset entity by ID.
func (bu *BillboardUpdate) SetAssetID(id uuid.UUID) *BillboardUpdate {
	bu.mutation.SetAssetID(id)
	return bu
}

// SetNillableAssetID sets the "asset" edge to the Asset entity by ID if the given value is not nil.
func (bu *BillboardUpdate) SetNillableAssetID(id *uuid.UUID) *BillboardUpdate {
	if id != nil {
		bu = bu.SetAssetID(*id)
	}
	return bu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (bu *BillboardUpdate) SetAsset(a *Asset) *BillboardUpdate {
	return bu.SetAssetID(a.ID)
}

// Mutation returns the BillboardMutation object of the builder.
func (bu *BillboardUpdate) Mutation() *BillboardMutation {
	return bu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (bu *BillboardUpdate) ClearAsset() *BillboardUpdate {
	bu.mutation.ClearAsset()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillboardUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillboardUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillboardUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillboardUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BillboardUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := billboard.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BillboardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billboard.Table, billboard.Columns, sqlgraph.NewFieldSpec(billboard.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(billboard.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(billboard.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(billboard.FieldDescription, field.TypeString)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(billboard.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(billboard.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billboard.AssetTable,
			Columns: []string{billboard.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billboard.AssetTable,
			Columns: []string{billboard.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillboardUpdateOne is the builder for updating a single Billboard entity.
type BillboardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillboardMutation
}

// SetTitle sets the "title" field.
func (buo *BillboardUpdateOne) SetTitle(s string) *BillboardUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BillboardUpdateOne) SetNillableTitle(s *string) *BillboardUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BillboardUpdateOne) SetDescription(s string) *BillboardUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BillboardUpdateOne) SetNillableDescription(s *string) *BillboardUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BillboardUpdateOne) ClearDescription() *BillboardUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BillboardUpdateOne) SetCreatedAt(t time.Time) *BillboardUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BillboardUpdateOne) SetNillableCreatedAt(t *time.Time) *BillboardUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BillboardUpdateOne) SetUpdatedAt(t time.Time) *BillboardUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetAssetID sets the "asset" edge to the Asset entity by ID.
func (buo *BillboardUpdateOne) SetAssetID(id uuid.UUID) *BillboardUpdateOne {
	buo.mutation.SetAssetID(id)
	return buo
}

// SetNillableAssetID sets the "asset" edge to the Asset entity by ID if the given value is not nil.
func (buo *BillboardUpdateOne) SetNillableAssetID(id *uuid.UUID) *BillboardUpdateOne {
	if id != nil {
		buo = buo.SetAssetID(*id)
	}
	return buo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (buo *BillboardUpdateOne) SetAsset(a *Asset) *BillboardUpdateOne {
	return buo.SetAssetID(a.ID)
}

// Mutation returns the BillboardMutation object of the builder.
func (buo *BillboardUpdateOne) Mutation() *BillboardMutation {
	return buo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (buo *BillboardUpdateOne) ClearAsset() *BillboardUpdateOne {
	buo.mutation.ClearAsset()
	return buo
}

// Where appends a list predicates to the BillboardUpdate builder.
func (buo *BillboardUpdateOne) Where(ps ...predicate.Billboard) *BillboardUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillboardUpdateOne) Select(field string, fields ...string) *BillboardUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Billboard entity.
func (buo *BillboardUpdateOne) Save(ctx context.Context) (*Billboard, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillboardUpdateOne) SaveX(ctx context.Context) *Billboard {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillboardUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillboardUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BillboardUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := billboard.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BillboardUpdateOne) sqlSave(ctx context.Context) (_node *Billboard, err error) {
	_spec := sqlgraph.NewUpdateSpec(billboard.Table, billboard.Columns, sqlgraph.NewFieldSpec(billboard.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Billboard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billboard.FieldID)
		for _, f := range fields {
			if !billboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(billboard.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(billboard.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(billboard.FieldDescription, field.TypeString)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(billboard.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(billboard.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billboard.AssetTable,
			Columns: []string{billboard.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billboard.AssetTable,
			Columns: []string{billboard.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Billboard{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
