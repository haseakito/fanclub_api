// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hackgame-org/fanclub_api/api/ent/predicate"
	"github.com/hackgame-org/fanclub_api/api/ent/user"
	"github.com/hackgame-org/fanclub_api/api/ent/verificationtoken"
)

// VerificationTokenUpdate is the builder for updating VerificationToken entities.
type VerificationTokenUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationTokenMutation
}

// Where appends a list predicates to the VerificationTokenUpdate builder.
func (vtu *VerificationTokenUpdate) Where(ps ...predicate.VerificationToken) *VerificationTokenUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetEmail sets the "email" field.
func (vtu *VerificationTokenUpdate) SetEmail(s string) *VerificationTokenUpdate {
	vtu.mutation.SetEmail(s)
	return vtu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vtu *VerificationTokenUpdate) SetNillableEmail(s *string) *VerificationTokenUpdate {
	if s != nil {
		vtu.SetEmail(*s)
	}
	return vtu
}

// SetVerificationCode sets the "verification_code" field.
func (vtu *VerificationTokenUpdate) SetVerificationCode(s string) *VerificationTokenUpdate {
	vtu.mutation.SetVerificationCode(s)
	return vtu
}

// SetNillableVerificationCode sets the "verification_code" field if the given value is not nil.
func (vtu *VerificationTokenUpdate) SetNillableVerificationCode(s *string) *VerificationTokenUpdate {
	if s != nil {
		vtu.SetVerificationCode(*s)
	}
	return vtu
}

// SetExpiresAt sets the "expires_at" field.
func (vtu *VerificationTokenUpdate) SetExpiresAt(t time.Time) *VerificationTokenUpdate {
	vtu.mutation.SetExpiresAt(t)
	return vtu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vtu *VerificationTokenUpdate) SetNillableExpiresAt(t *time.Time) *VerificationTokenUpdate {
	if t != nil {
		vtu.SetExpiresAt(*t)
	}
	return vtu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vtu *VerificationTokenUpdate) SetUserID(id string) *VerificationTokenUpdate {
	vtu.mutation.SetUserID(id)
	return vtu
}

// SetUser sets the "user" edge to the User entity.
func (vtu *VerificationTokenUpdate) SetUser(u *User) *VerificationTokenUpdate {
	return vtu.SetUserID(u.ID)
}

// Mutation returns the VerificationTokenMutation object of the builder.
func (vtu *VerificationTokenUpdate) Mutation() *VerificationTokenMutation {
	return vtu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vtu *VerificationTokenUpdate) ClearUser() *VerificationTokenUpdate {
	vtu.mutation.ClearUser()
	return vtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *VerificationTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *VerificationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *VerificationTokenUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *VerificationTokenUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtu *VerificationTokenUpdate) check() error {
	if v, ok := vtu.mutation.VerificationCode(); ok {
		if err := verificationtoken.VerificationCodeValidator(v); err != nil {
			return &ValidationError{Name: "verification_code", err: fmt.Errorf(`ent: validator failed for field "VerificationToken.verification_code": %w`, err)}
		}
	}
	if _, ok := vtu.mutation.UserID(); vtu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VerificationToken.user"`)
	}
	return nil
}

func (vtu *VerificationTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(verificationtoken.Table, verificationtoken.Columns, sqlgraph.NewFieldSpec(verificationtoken.FieldID, field.TypeInt))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.Email(); ok {
		_spec.SetField(verificationtoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := vtu.mutation.VerificationCode(); ok {
		_spec.SetField(verificationtoken.FieldVerificationCode, field.TypeString, value)
	}
	if value, ok := vtu.mutation.ExpiresAt(); ok {
		_spec.SetField(verificationtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if vtu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   verificationtoken.UserTable,
			Columns: []string{verificationtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   verificationtoken.UserTable,
			Columns: []string{verificationtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verificationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// VerificationTokenUpdateOne is the builder for updating a single VerificationToken entity.
type VerificationTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationTokenMutation
}

// SetEmail sets the "email" field.
func (vtuo *VerificationTokenUpdateOne) SetEmail(s string) *VerificationTokenUpdateOne {
	vtuo.mutation.SetEmail(s)
	return vtuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vtuo *VerificationTokenUpdateOne) SetNillableEmail(s *string) *VerificationTokenUpdateOne {
	if s != nil {
		vtuo.SetEmail(*s)
	}
	return vtuo
}

// SetVerificationCode sets the "verification_code" field.
func (vtuo *VerificationTokenUpdateOne) SetVerificationCode(s string) *VerificationTokenUpdateOne {
	vtuo.mutation.SetVerificationCode(s)
	return vtuo
}

// SetNillableVerificationCode sets the "verification_code" field if the given value is not nil.
func (vtuo *VerificationTokenUpdateOne) SetNillableVerificationCode(s *string) *VerificationTokenUpdateOne {
	if s != nil {
		vtuo.SetVerificationCode(*s)
	}
	return vtuo
}

// SetExpiresAt sets the "expires_at" field.
func (vtuo *VerificationTokenUpdateOne) SetExpiresAt(t time.Time) *VerificationTokenUpdateOne {
	vtuo.mutation.SetExpiresAt(t)
	return vtuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vtuo *VerificationTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *VerificationTokenUpdateOne {
	if t != nil {
		vtuo.SetExpiresAt(*t)
	}
	return vtuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vtuo *VerificationTokenUpdateOne) SetUserID(id string) *VerificationTokenUpdateOne {
	vtuo.mutation.SetUserID(id)
	return vtuo
}

// SetUser sets the "user" edge to the User entity.
func (vtuo *VerificationTokenUpdateOne) SetUser(u *User) *VerificationTokenUpdateOne {
	return vtuo.SetUserID(u.ID)
}

// Mutation returns the VerificationTokenMutation object of the builder.
func (vtuo *VerificationTokenUpdateOne) Mutation() *VerificationTokenMutation {
	return vtuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vtuo *VerificationTokenUpdateOne) ClearUser() *VerificationTokenUpdateOne {
	vtuo.mutation.ClearUser()
	return vtuo
}

// Where appends a list predicates to the VerificationTokenUpdate builder.
func (vtuo *VerificationTokenUpdateOne) Where(ps ...predicate.VerificationToken) *VerificationTokenUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *VerificationTokenUpdateOne) Select(field string, fields ...string) *VerificationTokenUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated VerificationToken entity.
func (vtuo *VerificationTokenUpdateOne) Save(ctx context.Context) (*VerificationToken, error) {
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *VerificationTokenUpdateOne) SaveX(ctx context.Context) *VerificationToken {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *VerificationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *VerificationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtuo *VerificationTokenUpdateOne) check() error {
	if v, ok := vtuo.mutation.VerificationCode(); ok {
		if err := verificationtoken.VerificationCodeValidator(v); err != nil {
			return &ValidationError{Name: "verification_code", err: fmt.Errorf(`ent: validator failed for field "VerificationToken.verification_code": %w`, err)}
		}
	}
	if _, ok := vtuo.mutation.UserID(); vtuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VerificationToken.user"`)
	}
	return nil
}

func (vtuo *VerificationTokenUpdateOne) sqlSave(ctx context.Context) (_node *VerificationToken, err error) {
	if err := vtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verificationtoken.Table, verificationtoken.Columns, sqlgraph.NewFieldSpec(verificationtoken.FieldID, field.TypeInt))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VerificationToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verificationtoken.FieldID)
		for _, f := range fields {
			if !verificationtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verificationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.Email(); ok {
		_spec.SetField(verificationtoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := vtuo.mutation.VerificationCode(); ok {
		_spec.SetField(verificationtoken.FieldVerificationCode, field.TypeString, value)
	}
	if value, ok := vtuo.mutation.ExpiresAt(); ok {
		_spec.SetField(verificationtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if vtuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   verificationtoken.UserTable,
			Columns: []string{verificationtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   verificationtoken.UserTable,
			Columns: []string{verificationtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VerificationToken{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verificationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}
